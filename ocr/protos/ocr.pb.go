// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ocr.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OCRResponse_Status int32

const (
	OCRResponse_UNDEFINED  OCRResponse_Status = 0
	OCRResponse_PROCESSING OCRResponse_Status = 1
	OCRResponse_FAILED     OCRResponse_Status = 2
	OCRResponse_SUCCESS    OCRResponse_Status = 3
)

var OCRResponse_Status_name = map[int32]string{
	0: "UNDEFINED",
	1: "PROCESSING",
	2: "FAILED",
	3: "SUCCESS",
}

var OCRResponse_Status_value = map[string]int32{
	"UNDEFINED":  0,
	"PROCESSING": 1,
	"FAILED":     2,
	"SUCCESS":    3,
}

func (x OCRResponse_Status) String() string {
	return proto.EnumName(OCRResponse_Status_name, int32(x))
}

func (OCRResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_52282bc2e1d222c6, []int{1, 0}
}

type OCRRequest struct {
	// Path to the image.
	RawImgPath string `protobuf:"bytes,1,opt,name=raw_img_path,json=rawImgPath,proto3" json:"raw_img_path,omitempty"`
	// Whether to store results in the database.
	Store bool `protobuf:"varint,2,opt,name=store,proto3" json:"store,omitempty"`
	// Whether to return image path only after the file has been
	// parsed and stored.
	Async                bool     `protobuf:"varint,3,opt,name=async,proto3" json:"async,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OCRRequest) Reset()         { *m = OCRRequest{} }
func (m *OCRRequest) String() string { return proto.CompactTextString(m) }
func (*OCRRequest) ProtoMessage()    {}
func (*OCRRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_52282bc2e1d222c6, []int{0}
}

func (m *OCRRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCRRequest.Unmarshal(m, b)
}
func (m *OCRRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCRRequest.Marshal(b, m, deterministic)
}
func (m *OCRRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCRRequest.Merge(m, src)
}
func (m *OCRRequest) XXX_Size() int {
	return xxx_messageInfo_OCRRequest.Size(m)
}
func (m *OCRRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OCRRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OCRRequest proto.InternalMessageInfo

func (m *OCRRequest) GetRawImgPath() string {
	if m != nil {
		return m.RawImgPath
	}
	return ""
}

func (m *OCRRequest) GetStore() bool {
	if m != nil {
		return m.Store
	}
	return false
}

func (m *OCRRequest) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

type OCRResponse struct {
	ParsedImgId          string             `protobuf:"bytes,1,opt,name=parsed_img_id,json=parsedImgId,proto3" json:"parsed_img_id,omitempty"`
	Status               OCRResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=protos.OCRResponse_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OCRResponse) Reset()         { *m = OCRResponse{} }
func (m *OCRResponse) String() string { return proto.CompactTextString(m) }
func (*OCRResponse) ProtoMessage()    {}
func (*OCRResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_52282bc2e1d222c6, []int{1}
}

func (m *OCRResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OCRResponse.Unmarshal(m, b)
}
func (m *OCRResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OCRResponse.Marshal(b, m, deterministic)
}
func (m *OCRResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCRResponse.Merge(m, src)
}
func (m *OCRResponse) XXX_Size() int {
	return xxx_messageInfo_OCRResponse.Size(m)
}
func (m *OCRResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OCRResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OCRResponse proto.InternalMessageInfo

func (m *OCRResponse) GetParsedImgId() string {
	if m != nil {
		return m.ParsedImgId
	}
	return ""
}

func (m *OCRResponse) GetStatus() OCRResponse_Status {
	if m != nil {
		return m.Status
	}
	return OCRResponse_UNDEFINED
}

func init() {
	proto.RegisterEnum("protos.OCRResponse_Status", OCRResponse_Status_name, OCRResponse_Status_value)
	proto.RegisterType((*OCRRequest)(nil), "protos.OCRRequest")
	proto.RegisterType((*OCRResponse)(nil), "protos.OCRResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OCRServiceClient is the client API for OCRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OCRServiceClient interface {
	DoOCR(ctx context.Context, in *OCRRequest, opts ...grpc.CallOption) (*OCRResponse, error)
}

type oCRServiceClient struct {
	cc *grpc.ClientConn
}

func NewOCRServiceClient(cc *grpc.ClientConn) OCRServiceClient {
	return &oCRServiceClient{cc}
}

func (c *oCRServiceClient) DoOCR(ctx context.Context, in *OCRRequest, opts ...grpc.CallOption) (*OCRResponse, error) {
	out := new(OCRResponse)
	err := c.cc.Invoke(ctx, "/protos.OCRService/DoOCR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCRServiceServer is the server API for OCRService service.
type OCRServiceServer interface {
	DoOCR(context.Context, *OCRRequest) (*OCRResponse, error)
}

func RegisterOCRServiceServer(s *grpc.Server, srv OCRServiceServer) {
	s.RegisterService(&_OCRService_serviceDesc, srv)
}

func _OCRService_DoOCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OCRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCRServiceServer).DoOCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.OCRService/DoOCR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCRServiceServer).DoOCR(ctx, req.(*OCRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OCRService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.OCRService",
	HandlerType: (*OCRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoOCR",
			Handler:    _OCRService_DoOCR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocr.proto",
}

func init() { proto.RegisterFile("ocr.proto", fileDescriptor_52282bc2e1d222c6) }

var fileDescriptor_52282bc2e1d222c6 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x6b, 0xbb, 0x40,
	0x14, 0xc4, 0xff, 0x26, 0xc4, 0x7f, 0x7d, 0x36, 0x41, 0x5e, 0x7b, 0x90, 0x9c, 0xc4, 0x53, 0x4e,
	0x52, 0xec, 0xbd, 0xb4, 0xa8, 0x29, 0x0b, 0x45, 0xc3, 0x4a, 0x2e, 0xbd, 0x84, 0xad, 0x2e, 0xc6,
	0x83, 0x59, 0xbb, 0xbb, 0x69, 0xe8, 0x27, 0xea, 0xd7, 0x2c, 0xd9, 0xcd, 0xa1, 0x85, 0x9e, 0x96,
	0xf7, 0xdb, 0x61, 0x66, 0x18, 0xf0, 0x44, 0x23, 0x93, 0x51, 0x0a, 0x2d, 0xd0, 0x35, 0x8f, 0x8a,
	0x5f, 0x01, 0xaa, 0x8c, 0x52, 0xfe, 0x7e, 0xe4, 0x4a, 0x63, 0x04, 0xd7, 0x92, 0x9d, 0x76, 0xfd,
	0xd0, 0xed, 0x46, 0xa6, 0xf7, 0xa1, 0x13, 0x39, 0x2b, 0x8f, 0x82, 0x64, 0x27, 0x32, 0x74, 0x1b,
	0xa6, 0xf7, 0x78, 0x0b, 0x33, 0xa5, 0x85, 0xe4, 0xe1, 0x24, 0x72, 0x56, 0x57, 0xd4, 0x1e, 0x67,
	0xca, 0xd4, 0xe7, 0xa1, 0x09, 0xa7, 0x96, 0x9a, 0x23, 0xfe, 0x72, 0xc0, 0x37, 0xe6, 0x6a, 0x14,
	0x07, 0xc5, 0x31, 0x86, 0xf9, 0xc8, 0xa4, 0xe2, 0xad, 0x09, 0xe8, 0xdb, 0x8b, 0xbd, 0x6f, 0x21,
	0x19, 0x3a, 0xd2, 0x62, 0x0a, 0xae, 0xd2, 0x4c, 0x1f, 0x95, 0x09, 0x58, 0xa4, 0x4b, 0xdb, 0x57,
	0x25, 0x3f, 0x8c, 0x92, 0xda, 0x28, 0xe8, 0x45, 0x19, 0x3f, 0x82, 0x6b, 0x09, 0xce, 0xc1, 0xdb,
	0x96, 0x79, 0xb1, 0x26, 0x65, 0x91, 0x07, 0xff, 0x70, 0x01, 0xb0, 0xa1, 0x55, 0x56, 0xd4, 0x35,
	0x29, 0x9f, 0x03, 0x07, 0x01, 0xdc, 0xf5, 0x13, 0x79, 0x29, 0xf2, 0x60, 0x82, 0x3e, 0xfc, 0xaf,
	0xb7, 0xd9, 0xf9, 0x2f, 0x98, 0xa6, 0x0f, 0x66, 0x85, 0x9a, 0xcb, 0x8f, 0xbe, 0xe1, 0x78, 0x07,
	0xb3, 0x5c, 0x54, 0x19, 0x45, 0xfc, 0x15, 0x6e, 0x26, 0x5a, 0xde, 0xfc, 0x51, 0xe8, 0xcd, 0xae,
	0x79, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x52, 0x6d, 0x02, 0x61, 0x01, 0x00, 0x00,
}
